// src/screens/WasteGuideScreen.js
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Image,
  ScrollView,
  Alert,
  ActivityIndicator,
  StatusBar,
  Linking,
  Platform,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import * as Location from "expo-location";
import { IMAGGA_API_KEY, IMAGGA_API_SECRET } from "@env";


// D·ªØ li·ªáu chi ti·∫øt v·ªÅ c√°c lo·∫°i r√°c
const WASTE_TYPES = [
  {
    type: "H·ªØu c∆°",
    icon: "leaf-outline",
    color: "#4CAF50",
    description: "R√°c th·ª±c ph·∫©m, l√° c√¢y, rau qu·∫£",
    guide: "R√°c h·ªØu c∆° c√≥ th·ªÉ ·ªß compost t·∫°i nh√† ho·∫∑c ƒëem ƒë·∫øn ƒëi·ªÉm thu gom ƒë·ªÉ ch·∫ø bi·∫øn th√†nh ph√¢n b√≥n h·ªØu c∆°.",
    tips: [
      "Ph√¢n lo·∫°i ri√™ng r√°c th·ª±c ph·∫©m",
      "C√≥ th·ªÉ ·ªß compost t·∫°i nh√†",
      "Tr√°nh tr·ªôn v·ªõi nh·ª±a, kim lo·∫°i",
    ],
    recyclable: true,
    hazardous: false,
  },
  {
    type: "Nh·ª±a",
    icon: "water-outline",
    color: "#03A9F4",
    description: "Chai, t√∫i, h·ªôp nh·ª±a",
    guide: "R·ª≠a s·∫°ch, g·ª° nh√£n, ph√¢n lo·∫°i theo k√Ω hi·ªáu t√°i ch·∫ø (PET, HDPE, PP...) v√† ƒëem ƒë·∫øn ƒëi·ªÉm thu gom t√°i ch·∫ø.",
    tips: [
      "R·ª≠a s·∫°ch tr∆∞·ªõc khi b·ªè",
      "G·ª° nh√£n v√† n·∫Øp ƒë·∫≠y",
      "Ph√¢n lo·∫°i theo s·ªë t√°i ch·∫ø",
    ],
    recyclable: true,
    hazardous: false,
  },
  {
    type: "Kim lo·∫°i",
    icon: "construct-outline",
    color: "#FFC107",
    description: "Lon, h·ªôp thi·∫øc, d√¢y ƒëi·ªán",
    guide: "Kim lo·∫°i c√≥ gi√° tr·ªã t√°i ch·∫ø cao. Thu gom ri√™ng, l√†m s·∫°ch v√† ƒëem b√°n ph·∫ø li·ªáu ho·∫∑c t·ªõi ƒëi·ªÉm t√°i ch·∫ø.",
    tips: [
      "Thu gom ri√™ng bi·ªát",
      "C√≥ th·ªÉ b√°n cho th∆∞∆°ng l√°i",
      "Gi√° tr·ªã t√°i ch·∫ø cao",
    ],
    recyclable: true,
    hazardous: false,
  },
  {
    type: "ƒêi·ªán t·ª≠",
    icon: "hardware-chip-outline",
    color: "#9C27B0",
    description: "Pin, m√°y t√≠nh, ƒëi·ªán tho·∫°i",
    guide: "R√°c ƒëi·ªán t·ª≠ ch·ª©a kim lo·∫°i n·∫∑ng nguy h·∫°i. ƒêem ƒë·∫øn ƒëi·ªÉm thu gom chuy√™n d·ª•ng ho·∫∑c c√°c ch∆∞∆°ng tr√¨nh thu h·ªìi.",
    tips: [
      "KH√îNG v·ª©t chung r√°c th·∫£i sinh ho·∫°t",
      "ƒêem ƒë·∫øn ƒëi·ªÉm thu gom chuy√™n d·ª•ng",
      "X√≥a d·ªØ li·ªáu c√° nh√¢n tr∆∞·ªõc khi v·ª©t",
    ],
    recyclable: true,
    hazardous: true,
  },
  {
    type: "Y t·∫ø",
    icon: "medkit-outline",
    color: "#E53935",
    description: "Kh·∫©u trang, bƒÉng g·∫°c, kim ti√™m",
    guide: "R√°c y t·∫ø nguy h·∫°i c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·∫∑c bi·ªát. ƒê·ª±ng trong t√∫i ri√™ng, g·∫Øn nh√£n v√† ƒë∆∞a t·ªõi c∆° s·ªü y t·∫ø ho·∫∑c ƒëi·ªÉm thu gom chuy√™n d·ª•ng.",
    tips: [
      "ƒê·ª±ng trong t√∫i k√≠n, g·∫Øn nh√£n",
      "KH√îNG t√°i ch·∫ø",
      "ƒêem ƒë·∫øn c∆° s·ªü y t·∫ø ho·∫∑c ƒëi·ªÉm thu gom ƒë·∫∑c bi·ªát",
    ],
    recyclable: false,
    hazardous: true,
  },
  {
    type: "Gi·∫•y",
    icon: "newspaper-outline",
    color: "#795548",
    description: "B√°o, s√°ch, b√¨a carton",
    guide: "Gi·∫•y c√≥ th·ªÉ t√°i ch·∫ø nhi·ªÅu l·∫ßn. Gi·ªØ kh√¥ r√°o, g·ª° keo d√≠nh, kim ghim v√† ƒëem ƒë·∫øn ƒëi·ªÉm thu gom.",
    tips: ["Gi·ªØ kh√¥ r√°o", "G·ª° keo d√≠nh v√† kim ghim", "X·∫øp g·ªçn g√†ng"],
    recyclable: true,
    hazardous: false,
  },
];

// D·ªØ li·ªáu v·∫≠t ph·∫©m th√¥ng d·ª•ng
const COMMON_ITEMS = {
  "chai nh·ª±a": { type: "Nh·ª±a", icon: "üíß" },
  "t√∫i nilon": { type: "Nh·ª±a", icon: "üõçÔ∏è" },
  "h·ªôp x·ªëp": { type: "Nh·ª±a", icon: "üì¶" },
  "lon bia": { type: "Kim lo·∫°i", icon: "ü•´" },
  "d√¢y ƒëi·ªán": { type: "Kim lo·∫°i", icon: "üîå" },
  pin: { type: "ƒêi·ªán t·ª≠", icon: "üîã" },
  "ƒëi·ªán tho·∫°i": { type: "ƒêi·ªán t·ª≠", icon: "üì±" },
  "m√°y t√≠nh": { type: "ƒêi·ªán t·ª≠", icon: "üíª" },
  "kh·∫©u trang": { type: "Y t·∫ø", icon: "üò∑" },
  "kim ti√™m": { type: "Y t·∫ø", icon: "üíâ" },
  "bƒÉng g·∫°c": { type: "Y t·∫ø", icon: "ü©π" },
  "v·ªè tr·ª©ng": { type: "H·ªØu c∆°", icon: "ü•ö" },
  "l√° c√¢y": { type: "H·ªØu c∆°", icon: "üçÇ" },
  "th·ª©c ƒÉn th·ª´a": { type: "H·ªØu c∆°", icon: "üçΩÔ∏è" },
  b√°o: { type: "Gi·∫•y", icon: "üì∞" },
  s√°ch: { type: "Gi·∫•y", icon: "üìö" },
  "h·ªôp carton": { type: "Gi·∫•y", icon: "üì¶" },
};

// Mapping lo·∫°i r√°c sang c√°c ƒë·ªãa ƒëi·ªÉm t√¨m ki·∫øm
const WASTE_TYPE_SEARCH = {
  "Y t·∫ø": ["hospital", "clinic", "pharmacy"],
  "ƒêi·ªán t·ª≠": ["recycling", "electronics"],
  Nh·ª±a: ["recycling", "waste"],
  "Kim lo·∫°i": ["recycling", "scrap"],
  Gi·∫•y: ["recycling", "waste"],
  "H·ªØu c∆°": ["recycling", "compost"],
};

export default function WasteGuideScreen() {
  const [selectedType, setSelectedType] = useState(null);
  const [search, setSearch] = useState("");
  const [pickedImage, setPickedImage] = useState(null);
  const [aiProcessing, setAiProcessing] = useState(false);
  const [aiResult, setAiResult] = useState(null);
  const [location, setLocation] = useState(null);
  const [nearbyLocations, setNearbyLocations] = useState([]);
  const [loadingLocations, setLoadingLocations] = useState(false);

  useEffect(() => {
    getLocation();
  }, []);

  useEffect(() => {
    if (location && selectedType) {
      fetchNearbyLocations();
    }
  }, [location, selectedType]);

  const getLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status === "granted") {
        const loc = await Location.getCurrentPositionAsync({});
        setLocation(loc.coords);
      } else {
        Alert.alert(
          "C·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠",
          "Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ t√¨m ƒëi·ªÉm thu gom g·∫ßn nh·∫•t"
        );
      }
    } catch (error) {
      console.error("L·ªói l·∫•y v·ªã tr√≠:", error);
    }
  };

  // H√†m t√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371;
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLon = ((lon2 - lon1) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  // Fetch ƒë·ªãa ƒëi·ªÉm s·ª≠ d·ª•ng Nominatim API (mi·ªÖn ph√≠ 100%)
  const fetchNearbyLocations = async () => {
    if (!location || !selectedType) return;

    setLoadingLocations(true);
    setNearbyLocations([]);

    try {
      const { latitude, longitude } = location;
      const searchTerms = WASTE_TYPE_SEARCH[selectedType] || ["recycling"];

      let allResults = [];

      // T√¨m ki·∫øm v·ªõi c√°c t·ª´ kh√≥a kh√°c nhau
      for (const term of searchTerms) {
        try {
          // Nominatim API - mi·ªÖn ph√≠, kh√¥ng c·∫ßn key
          const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
            term
          )}&lat=${latitude}&lon=${longitude}&bounded=1&viewbox=${longitude - 0.05
            },${latitude - 0.05},${longitude + 0.05},${latitude + 0.05}&limit=10`;

          const response = await fetch(url, {
            headers: {
              "User-Agent": "WasteGuideApp/1.0", // Nominatim y√™u c·∫ßu User-Agent
            },
          });

          if (response.ok) {
            const data = await response.json();
            if (data && data.length > 0) {
              allResults = [...allResults, ...data];
            }
          }

          // Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
          await new Promise((resolve) => setTimeout(resolve, 1000));
        } catch (err) {
          console.error(`Error searching for ${term}:`, err);
        }
      }

      // Lo·∫°i b·ªè tr√πng l·∫∑p
      const uniqueResults = Array.from(
        new Map(allResults.map((item) => [item.place_id, item])).values()
      );

      if (uniqueResults.length > 0) {
        const locations = uniqueResults
          .map((place) => {
            const lat = parseFloat(place.lat);
            const lon = parseFloat(place.lon);
            const distance = calculateDistance(latitude, longitude, lat, lon);

            return {
              id: place.place_id,
              name: place.display_name.split(",")[0] || "ƒê·ªãa ƒëi·ªÉm thu gom",
              address: place.display_name,
              distance: parseFloat(distance.toFixed(2)),
              lat,
              lon,
              types: [selectedType],
            };
          })
          .filter((loc) => loc.distance <= 10) // Ch·ªâ l·∫•y trong b√°n k√≠nh 10km
          .sort((a, b) => a.distance - b.distance)
          .slice(0, 5);

        if (locations.length > 0) {
          setNearbyLocations(locations);
        } else {
          useFallbackData();
        }
      } else {
        useFallbackData();
      }
    } catch (error) {
      console.error("L·ªói fetch ƒë·ªãa ƒëi·ªÉm:", error);
      useFallbackData();
    } finally {
      setLoadingLocations(false);
    }
  };

  // D·ªØ li·ªáu d·ª± ph√≤ng cho TP.HCM
  const useFallbackData = () => {
    if (!location) return;

    const { latitude, longitude } = location;

    const fallbackLocations = [
      {
        id: "fb1",
        name: "Trung t√¢m T√°i ch·∫ø Qu·∫≠n 1",
        address: "149 Pasteur, Ph∆∞·ªùng 6, Qu·∫≠n 3, TP.HCM",
        lat: 10.7796,
        lon: 106.6926,
        phone: "028 3829 7724",
        types: ["Nh·ª±a", "Kim lo·∫°i", "Gi·∫•y"],
      },
      {
        id: "fb2",
        name: "Thu mua ph·∫ø li·ªáu Minh Ph√°t",
        address: "234 C·ªông H√≤a, Ph∆∞·ªùng 13, T√¢n B√¨nh, TP.HCM",
        lat: 10.8006,
        lon: 106.6397,
        phone: "028 3844 5566",
        types: ["Kim lo·∫°i", "Nh·ª±a", "Gi·∫•y", "ƒêi·ªán t·ª≠"],
      },
      {
        id: "fb3",
        name: "B·ªánh vi·ªán Ch·ª£ R·∫´y",
        address: "201B Nguy·ªÖn Ch√≠ Thanh, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM",
        lat: 10.7549,
        lon: 106.6652,
        phone: "028 3855 4137",
        types: ["Y t·∫ø"],
      },
      {
        id: "fb4",
        name: "Trung t√¢m Y t·∫ø Qu·∫≠n 1",
        address: "221A Nguy·ªÖn Tr√£i, Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh, Q.1, TP.HCM",
        lat: 10.7629,
        lon: 106.6839,
        phone: "028 3920 6070",
        types: ["Y t·∫ø"],
      },
      {
        id: "fb5",
        name: "Tr·∫°m thu gom r√°c ƒëi·ªán t·ª≠ EcoTech",
        address: "567 ƒêi·ªán Bi√™n Ph·ªß, Ph∆∞·ªùng 25, B√¨nh Th·∫°nh, TP.HCM",
        lat: 10.7994,
        lon: 106.7124,
        phone: "028 3512 3456",
        types: ["ƒêi·ªán t·ª≠"],
      },
      {
        id: "fb6",
        name: "ƒêi·ªÉm thu gom r√°c h·ªØu c∆°",
        address: "89 Tr·∫ßn H∆∞ng ƒê·∫°o, Ph∆∞·ªùng C·∫ßu Kho, Qu·∫≠n 1, TP.HCM",
        lat: 10.7581,
        lon: 106.6896,
        phone: "028 3836 7890",
        types: ["H·ªØu c∆°"],
      },
      {
        id: "fb7",
        name: "B·ªánh vi·ªán ƒê·∫°i h·ªçc Y D∆∞·ª£c",
        address: "215 H·ªìng B√†ng, Ph∆∞·ªùng 11, Qu·∫≠n 5, TP.HCM",
        lat: 10.7549,
        lon: 106.6617,
        phone: "028 3855 4269",
        types: ["Y t·∫ø"],
      },
      {
        id: "fb8",
        name: "C√¥ng ty Thu gom r√°c Green Life",
        address: "123 L√™ VƒÉn S·ªπ, Ph∆∞·ªùng 13, Qu·∫≠n 3, TP.HCM",
        lat: 10.7871,
        lon: 106.6826,
        phone: "028 3930 1234",
        types: ["Nh·ª±a", "Gi·∫•y", "H·ªØu c∆°"],
      },
    ];

    const filtered = fallbackLocations
      .filter((loc) => loc.types.includes(selectedType))
      .map((loc) => ({
        ...loc,
        distance: parseFloat(
          calculateDistance(latitude, longitude, loc.lat, loc.lon).toFixed(2)
        ),
      }))
      .sort((a, b) => a.distance - b.distance)
      .slice(0, 5);

    setNearbyLocations(filtered);

    if (filtered.length === 0) {
      Alert.alert(
        "Th√¥ng b√°o",
        `Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu tr·ª±c tuy·∫øn v·ªÅ ƒëi·ªÉm thu gom ${selectedType}. ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu tham kh·∫£o t·∫°i TP.HCM.`
      );
    }
  };

  // H√†m x·ª≠ l√Ω ·∫£nh v·ªõi Imagga
  const analyzeImageWithImagga = async (imageUri) => {
  try {
    setAiProcessing(true);
    setAiResult(null);

    const formData = new FormData();
    formData.append("image", {
      uri: imageUri,
      type: "image/jpeg",
      name: "photo.jpg",
    });

    const res = await fetch("https://api.imagga.com/v2/tags", {
      method: "POST",
      headers: {
        Authorization:
          "Basic " + btoa(`${IMAGGA_API_KEY}:${IMAGGA_API_SECRET}`),
      },
      body: formData,
    });

    const data = await res.json();

    if (data.result && data.result.tags.length > 0) {
      const tags = data.result.tags.map((t) => t.tag.en.toLowerCase());
      console.log("AI tags:", tags);

      let recognizedType = "Kh√°c";
      if (tags.some((t) => t.includes("plastic") || t.includes("bottle") || t.includes("bag"))) {
        recognizedType = "Nh·ª±a";
      } else if (tags.some((t) => t.includes("paper") || t.includes("cardboard"))) {
        recognizedType = "Gi·∫•y";
      } else if (tags.some((t) => t.includes("metal") || t.includes("tin") || t.includes("aluminum"))) {
        recognizedType = "Kim lo·∫°i";
      } else if (tags.some((t) => t.includes("food") || t.includes("fruit") || t.includes("vegetable"))) {
        recognizedType = "H·ªØu c∆°";
      } else if (tags.some((t) => t.includes("battery") || t.includes("phone") || t.includes("computer"))) {
        recognizedType = "ƒêi·ªán t·ª≠";
      } else if (tags.some((t) => t.includes("mask") || t.includes("syringe"))) {
        recognizedType = "Y t·∫ø";
      }

      setAiResult(recognizedType);
      setSelectedType(recognizedType);
      Alert.alert("Nh·∫≠n d·∫°ng th√†nh c√¥ng", `R√°c ƒë∆∞·ª£c ph√¢n lo·∫°i l√†: ${recognizedType}`);
    } else {
      Alert.alert("Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c", "H√£y th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ n√©t h∆°n.");
    }
  } catch (error) {
    console.error("L·ªói Imagga:", error);
    Alert.alert("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi Imagga API.");
  } finally {
    setAiProcessing(false);
  }
};


  // üì∏ Ch·ª•p ·∫£nh
  const takePhoto = async () => {
    const permission = await ImagePicker.requestCameraPermissionsAsync();
    if (permission.granted) {
      const result = await ImagePicker.launchCameraAsync({
        quality: 0.8,
        allowsEditing: true,
      });

      if (!result.canceled) {
        const uri = result.assets[0].uri;
        setPickedImage(uri);
        await analyzeImageWithImagga(uri);
      }
    }
  };

  // üñº Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      quality: 0.8,
      allowsEditing: true,
    });

    if (!result.canceled) {
      const uri = result.assets[0].uri;
      setPickedImage(uri);
      await analyzeImageWithImagga(uri);
    }
  };

  const searchWasteGuide = () => {
    const searchLower = search.toLowerCase().trim();
    for (const [item, data] of Object.entries(COMMON_ITEMS)) {
      if (searchLower.includes(item)) {
        setSelectedType(data.type);
        return data;
      }
    }
    return null;
  };

  const selectedWasteInfo = WASTE_TYPES.find((w) => w.type === selectedType);

  const openMap = (lat, lon, name) => {
    const label = encodeURIComponent(name);
    const url =
      Platform.OS === "ios"
        ? `maps://maps.apple.com/?ll=${lat},${lon}&q=${label}`
        : `geo:${lat},${lon}?q=${lat},${lon}(${label})`;
    Linking.openURL(url);
  };

  const callPhone = (phone) => {
    if (phone) {
      Linking.openURL(`tel:${phone.replace(/\s/g, "")}`);
    }
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#f5f5f5" />
      <ScrollView
        style={styles.scroll}
        contentContainerStyle={{ paddingBottom: 80 }}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.header}>
          <Ionicons name="reload-circle" size={32} color="#2e7d32" />
          <Text style={styles.headerText}>H∆∞·ªõng d·∫´n x·ª≠ l√Ω r√°c th·∫£i</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üîç T√¨m ki·∫øm h∆∞·ªõng d·∫´n</Text>
          <View style={styles.searchContainer}>
            <Ionicons name="search" size={20} color="#555" />
            <TextInput
              style={styles.searchInput}
              placeholder="Nh·∫≠p t√™n v·∫≠t ph·∫©m (vd: chai nh·ª±a, pin...)"
              value={search}
              onChangeText={setSearch}
              onSubmitEditing={searchWasteGuide}
            />
            {search.length > 0 && (
              <TouchableOpacity onPress={() => setSearch("")}>
                <Ionicons name="close-circle" size={20} color="#999" />
              </TouchableOpacity>
            )}
          </View>

          {search.length > 0 && (
            <View style={styles.searchResults}>
              {Object.entries(COMMON_ITEMS)
                .filter(([item]) => item.includes(search.toLowerCase()))
                .slice(0, 5)
                .map(([item, data]) => (
                  <TouchableOpacity
                    key={item}
                    style={styles.searchResultItem}
                    onPress={() => {
                      setSearch(item);
                      setSelectedType(data.type);
                    }}
                  >
                    <Text style={styles.searchResultIcon}>{data.icon}</Text>
                    <Text style={styles.searchResultText}>{item}</Text>
                    <Ionicons name="arrow-forward" size={16} color="#999" />
                  </TouchableOpacity>
                ))}
            </View>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>ü§ñ Nh·∫≠n d·∫°ng b·∫±ng AI</Text>
          <Text style={styles.sectionDesc}>
            Ch·ª•p ho·∫∑c t·∫£i l√™n h√¨nh ·∫£nh r√°c ƒë·ªÉ AI t·ª± ƒë·ªông ph√¢n lo·∫°i
          </Text>

          <View style={styles.aiButtons}>
            <TouchableOpacity style={styles.imageButton} onPress={takePhoto}>
              <Ionicons name="camera-outline" size={24} color="#2e7d32" />
              <Text style={styles.imageButtonText}>Ch·ª•p ·∫£nh</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.imageButton} onPress={pickImage}>
              <Ionicons name="image-outline" size={24} color="#2e7d32" />
              <Text style={styles.imageButtonText}>Ch·ªçn t·ª´ th∆∞ vi·ªán</Text>
            </TouchableOpacity>
          </View>

          {pickedImage && (
            <View style={styles.imagePreviewContainer}>
              <Image
                source={{ uri: pickedImage }}
                style={styles.previewImage}
              />
              {aiProcessing && (
                <View style={styles.processingOverlay}>
                  <ActivityIndicator size="large" color="#2e7d32" />
                  <Text style={styles.processingText}>ƒêang ph√¢n t√≠ch...</Text>
                </View>
              )}
            </View>
          )}

          {aiResult && !aiProcessing && (
            <View style={styles.aiResultBox}>
              <Ionicons name="checkmark-circle" size={24} color="#4CAF50" />
              <Text style={styles.aiResultText}>
                AI nh·∫≠n d·∫°ng:{" "}
                <Text style={styles.aiResultBold}>{aiResult}</Text>
              </Text>
            </View>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‚ôªÔ∏è Ph√¢n lo·∫°i r√°c th·∫£i</Text>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.wasteTypesScroll}
          >
            {WASTE_TYPES.map((waste) => (
              <TouchableOpacity
                key={waste.type}
                style={[
                  styles.wasteCard,
                  { borderColor: waste.color },
                  selectedType === waste.type && {
                    backgroundColor: waste.color + "15",
                    borderWidth: 2,
                  },
                ]}
                onPress={() => setSelectedType(waste.type)}
              >
                <Ionicons name={waste.icon} size={32} color={waste.color} />
                <Text style={[styles.wasteCardTitle, { color: waste.color }]}>
                  {waste.type}
                </Text>
                <Text style={styles.wasteCardDesc}>{waste.description}</Text>
                {waste.hazardous && (
                  <View style={styles.hazardBadge}>
                    <Ionicons name="warning" size={12} color="#E53935" />
                    <Text style={styles.hazardText}>Nguy h·∫°i</Text>
                  </View>
                )}
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {selectedWasteInfo && (
          <>
            <View
              style={[
                styles.detailCard,
                { borderLeftColor: selectedWasteInfo.color },
              ]}
            >
              <View style={styles.detailHeader}>
                <Ionicons
                  name={selectedWasteInfo.icon}
                  size={40}
                  color={selectedWasteInfo.color}
                />
                <View style={{ flex: 1, marginLeft: 15 }}>
                  <Text
                    style={[
                      styles.detailTitle,
                      { color: selectedWasteInfo.color },
                    ]}
                  >
                    {selectedWasteInfo.type}
                  </Text>
                  <Text style={styles.detailDesc}>
                    {selectedWasteInfo.description}
                  </Text>
                </View>
              </View>

              <View style={styles.detailSection}>
                <Text style={styles.detailSectionTitle}>
                  üìñ H∆∞·ªõng d·∫´n x·ª≠ l√Ω:
                </Text>
                <Text style={styles.detailText}>{selectedWasteInfo.guide}</Text>
              </View>

              <View style={styles.detailSection}>
                <Text style={styles.detailSectionTitle}>üí° M·∫πo h·ªØu √≠ch:</Text>
                {selectedWasteInfo.tips.map((tip, index) => (
                  <View key={index} style={styles.tipItem}>
                    <Ionicons
                      name="checkmark-circle"
                      size={16}
                      color="#4CAF50"
                    />
                    <Text style={styles.tipText}>{tip}</Text>
                  </View>
                ))}
              </View>

              <View style={styles.badges}>
                {selectedWasteInfo.recyclable && (
                  <View style={[styles.badge, { backgroundColor: "#4CAF50" }]}>
                    <Ionicons name="reload" size={14} color="#fff" />
                    <Text style={styles.badgeText}>T√°i ch·∫ø ƒë∆∞·ª£c</Text>
                  </View>
                )}
                {selectedWasteInfo.hazardous && (
                  <View style={[styles.badge, { backgroundColor: "#E53935" }]}>
                    <Ionicons name="warning" size={14} color="#fff" />
                    <Text style={styles.badgeText}>Nguy h·∫°i</Text>
                  </View>
                )}
              </View>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>
                üìç ƒê·ªãa ƒëi·ªÉm thu gom g·∫ßn nh·∫•t
              </Text>

              {loadingLocations && (
                <View style={styles.loadingContainer}>
                  <ActivityIndicator size="large" color="#2e7d32" />
                  <Text style={styles.loadingText}>
                    ƒêang t√¨m ƒë·ªãa ƒëi·ªÉm g·∫ßn b·∫°n...
                  </Text>
                </View>
              )}

              {!loadingLocations && nearbyLocations.length === 0 && (
                <View style={styles.noLocationContainer}>
                  <Ionicons name="location-outline" size={48} color="#999" />
                  <Text style={styles.noLocationText}>
                    Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm tr·ª±c tuy·∫øn
                  </Text>
                  <Text style={styles.noLocationSubText}>
                    Vui l√≤ng li√™n h·ªá ch√≠nh quy·ªÅn ƒë·ªãa ph∆∞∆°ng ƒë·ªÉ bi·∫øt th√¥ng tin
                    ƒëi·ªÉm thu gom {selectedType}
                  </Text>
                </View>
              )}

              {!loadingLocations &&
                nearbyLocations.map((loc, index) => (
                  <View key={loc.id || index} style={styles.locationCard}>
                    <View style={styles.locationHeader}>
                      <Ionicons name="location" size={24} color="#2e7d32" />
                      <View style={{ flex: 1, marginLeft: 10 }}>
                        <Text style={styles.locationName}>{loc.name}</Text>
                        <Text style={styles.locationAddress}>
                          {loc.address}
                        </Text>
                        <Text style={styles.locationDistance}>
                          üìè C√°ch b·∫°n {loc.distance} km
                        </Text>
                      </View>
                    </View>

                    <View style={styles.locationActions}>
                      <TouchableOpacity
                        style={styles.actionButtonFull}
                        onPress={() => openMap(loc.lat, loc.lon, loc.name)}
                      >
                        <Ionicons name="navigate" size={20} color="#fff" />
                        <Text style={styles.actionButtonText}>
                          Ch·ªâ ƒë∆∞·ªùng ƒë·∫øn ƒë√¢y
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                ))}
            </View>
          </>
        )}

        <View style={styles.tipsCard}>
          <Text style={styles.tipsTitle}>üåç M·∫πo b·∫£o v·ªá m√¥i tr∆∞·ªùng</Text>
          <Text style={styles.tipsText}>
            ‚Ä¢ Gi·∫£m thi·ªÉu s·ª≠ d·ª•ng ƒë·ªì nh·ª±a d√πng m·ªôt l·∫ßn{"\n"}‚Ä¢ Mang theo t√∫i v·∫£i
            khi ƒëi ch·ª£{"\n"}‚Ä¢ T√°i s·ª≠ d·ª•ng v√† s·ª≠a ch·ªØa tr∆∞·ªõc khi v·ª©t b·ªè{"\n"}‚Ä¢
            Ph√¢n lo·∫°i r√°c t·∫°i ngu·ªìn gi√∫p t√°i ch·∫ø hi·ªáu qu·∫£ h∆°n
          </Text>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    paddingTop: StatusBar.currentHeight || 40,
  },
  scroll: { flex: 1 },
  header: {
    backgroundColor: "#fff",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 10,
    paddingVertical: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  headerText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
  },
  section: {
    backgroundColor: "#fff",
    marginHorizontal: 15,
    marginTop: 15,
    padding: 15,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#2e7d32",
    marginBottom: 8,
  },
  sectionDesc: {
    fontSize: 13,
    color: "#666",
    marginBottom: 12,
  },
  searchContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f5f5f5",
    borderRadius: 10,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  searchInput: {
    flex: 1,
    fontSize: 14,
    marginLeft: 8,
    color: "#333",
  },
  searchResults: {
    marginTop: 10,
  },
  searchResultItem: {
    flexDirection: "row",
    alignItems: "center",
    padding: 12,
    backgroundColor: "#f9f9f9",
    borderRadius: 8,
    marginBottom: 8,
  },
  searchResultIcon: {
    fontSize: 24,
    marginRight: 10,
  },
  searchResultText: {
    flex: 1,
    fontSize: 14,
    color: "#333",
  },
  aiButtons: {
    flexDirection: "row",
    gap: 10,
  },
  imageButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#e8f5e9",
    padding: 12,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#c8e6c9",
  },
  imageButtonText: {
    marginLeft: 8,
    color: "#2e7d32",
    fontWeight: "600",
    fontSize: 13,
  },
  imagePreviewContainer: {
    marginTop: 15,
    position: "relative",
  },
  previewImage: {
    width: "100%",
    height: 200,
    borderRadius: 12,
    resizeMode: "cover",
  },
  processingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0,0,0,0.6)",
    borderRadius: 12,
    justifyContent: "center",
    alignItems: "center",
  },
  processingText: {
    color: "#fff",
    marginTop: 10,
    fontSize: 14,
    fontWeight: "600",
  },
  aiResultBox: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#e8f5e9",
    padding: 12,
    borderRadius: 10,
    marginTop: 12,
  },
  aiResultText: {
    marginLeft: 8,
    fontSize: 14,
    color: "#333",
  },
  aiResultBold: {
    fontWeight: "bold",
    color: "#2e7d32",
  },
  wasteTypesScroll: {
    marginTop: 10,
  },
  wasteCard: {
    width: 140,
    padding: 15,
    borderRadius: 12,
    borderWidth: 1,
    marginRight: 10,
    backgroundColor: "#fff",
    alignItems: "center",
  },
  wasteCardTitle: {
    fontSize: 14,
    fontWeight: "bold",
    marginTop: 8,
  },
  wasteCardDesc: {
    fontSize: 11,
    color: "#666",
    textAlign: "center",
    marginTop: 4,
  },
  hazardBadge: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#ffebee",
    paddingHorizontal: 6,
    paddingVertical: 3,
    borderRadius: 4,
    marginTop: 6,
  },
  hazardText: {
    fontSize: 10,
    color: "#E53935",
    marginLeft: 3,
    fontWeight: "600",
  },
  detailCard: {
    backgroundColor: "#fff",
    marginHorizontal: 15,
    marginTop: 15,
    padding: 20,
    borderRadius: 12,
    borderLeftWidth: 5,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 2,
  },
  detailHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 15,
  },
  detailTitle: {
    fontSize: 20,
    fontWeight: "bold",
  },
  detailDesc: {
    fontSize: 13,
    color: "#666",
    marginTop: 4,
  },
  detailSection: {
    marginTop: 15,
  },
  detailSectionTitle: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 8,
  },
  detailText: {
    fontSize: 14,
    color: "#444",
    lineHeight: 22,
  },
  tipItem: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: 6,
  },
  tipText: {
    fontSize: 13,
    color: "#555",
    marginLeft: 8,
    flex: 1,
    lineHeight: 20,
  },
  badges: {
    flexDirection: "row",
    marginTop: 15,
    gap: 8,
  },
  badge: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 6,
  },
  badgeText: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600",
    marginLeft: 4,
  },
  loadingContainer: {
    padding: 30,
    alignItems: "center",
  },
  loadingText: {
    marginTop: 10,
    fontSize: 14,
    color: "#666",
  },
  noLocationContainer: {
    padding: 30,
    alignItems: "center",
  },
  noLocationText: {
    fontSize: 15,
    fontWeight: "600",
    color: "#666",
    marginTop: 15,
    textAlign: "center",
  },
  noLocationSubText: {
    fontSize: 13,
    color: "#999",
    marginTop: 8,
    textAlign: "center",
    lineHeight: 20,
  },
  locationCard: {
    backgroundColor: "#f9f9f9",
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  locationHeader: {
    flexDirection: "row",
    alignItems: "flex-start",
  },
  locationName: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#333",
  },
  locationAddress: {
    fontSize: 12,
    color: "#666",
    marginTop: 4,
  },
  locationDistance: {
    fontSize: 12,
    color: "#2e7d32",
    marginTop: 4,
    fontWeight: "600",
  },
  locationPhone: {
    fontSize: 12,
    color: "#2e7d32",
    marginTop: 2,
    textDecorationLine: "underline",
  },
  locationActions: {
    marginTop: 12,
  },
  actionButtonFull: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#2e7d32",
    padding: 12,
    borderRadius: 8,
  },
  actionButtonText: {
    marginLeft: 8,
    color: "#fff",
    fontSize: 14,
    fontWeight: "600",
  },
  tipsCard: {
    backgroundColor: "#e8f5e9",
    marginHorizontal: 15,
    marginTop: 15,
    padding: 20,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#c8e6c9",
  },
  tipsTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#2e7d32",
    marginBottom: 10,
  },
  tipsText: {
    fontSize: 13,
    color: "#1b5e20",
    lineHeight: 22,
  },
});